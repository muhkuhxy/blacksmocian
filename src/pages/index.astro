---
import NavLinks from '../components/navLinks.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import Hero from '../sections/hero.astro';
import ProduktFeatures from '../sections/produkt-features.astro';
import TechnischeDaten from '../sections/technische-daten.astro';
import FlameLogo from '../components/icons/FlameLogo.astro';
import CrossedKnifes from '../components/icons/CrossedKnifes.astro';
import Herstellung from '../sections/herstellung.astro';
import Masterminds from '../sections/masterminds.astro';
import Contact from '../sections/contact.astro';
import IconArrow from '../components/icons/IconArrow.astro';
import DashedLine from '../components/DashedLine.astro';

const sections = 7
const gutter1 = '150px'
const gutter2 = '175px'
const endGutter = '175px'
const startGutter = parseInt(gutter1) + parseInt(gutter2) + 'px'
---
<BaseLayout>
  <div class="relative grid grid-cols-[var(--gutter1),var(--gutter2),auto,var(--endGutter)] grid-rows-[minmax(max-content,10vh),repeat(var(--sections),auto)] gap-y-16">

    <div class="row-start-1 col-start-1 col-span-full h-min bg-coal bg-opacity-60 pl-[var(--startGutter)] pr-[var(--endGutter)] sticky top-0 z-50">
      <nav class="relative flex self-start items-center px-12 py-16">
        <ul class="flex justify-between w-full uppercase">
          <NavLinks></NavLinks>
        </ul>
        <FlameLogo class="absolute left-0 top-0 w-32 ml-[-5rem] mt-[2rem] fill-ember"></FlameLogo>
      </nav>
    </div>

    <a href="#contact" class="row-span-full col-start-1 mt-[50vh] translate-y-[-50%] [writing-mode:vertical-lr] self-start justify-self-center pr-4 rotate-180 pin uppercase">
      Hol dir hier deinen Smoker!
    </a>
    <DashedLine id="cta-arrow"
      class="[grid-row:1/-2] col-start-2 w-1 h-full justify-self-start stroke-white -z-10"
    ></DashedLine>

    <section id="hero" class="hero row-start-1 row-span-2 col-start-3">
      <Hero></Hero>
    </section>

    <section id="data" class="row-start-3 col-start-3">
      <TechnischeDaten></TechnischeDaten>
      <div class="h-24"></div>
      <ProduktFeatures></ProduktFeatures>
    </section>

    <div class="row-start-4 col-start-1 col-span-4 my-64 grid grid-rows-1 grid-cols-1 relative">
      <picture class="[grid-area:1/1] relative after:absolute after:inset-0 after:bg-black after:opacity-25">
        <img class="w-full h-[80vh] object-cover" src="/images/blacksmocian-edit-1-1101.jpg">
      </picture>
      <div class="[grid-area:1/1] w-48 relative -top-12 left-[calc(var(--gutter1)+25px)]">
        <CrossedKnifes class="fill-spark"></CrossedKnifes>
      </div>
      <div class="[grid-area:1/1] relative cursive text-6xl rotate-[270deg] w-fit h-fit origin-top-left place-self-end translate-y-[145%] translate-x-[33%]">
        Vollendetes Design<br>bis ins kleinste Detail
      </div>
    </div>

    <section id="production" class="row-start-5 col-start-3 pt-40">
      <Herstellung></Herstellung>
    </section>

    <section id="addons" class="row-start-6 col-start-3 pt-40">
      <h2>Optionales Zubeh√∂r</h2>
    </section>

    <section id="about" class="row-start-7 col-start-1 col-span-full pt-40">
      <Masterminds></Masterminds>
    </section>

    <section id="contact" class="row-start-8 col-start-2 col-span-2 pt-40">
      <Contact></Contact>
    </section>

    <a href="#" class="[grid-area:9/1] justify-self-end -mt-12 mb-8 border border-white py-1 px-2">
      <IconArrow class="rotate-180 w-4 fill-white py-2"></IconArrow>
    </a>
</div>
</BaseLayout>

<script>
import { gsap } from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'

gsap.registerPlugin(ScrollTrigger)

ScrollTrigger.create({
  trigger: '#cta-arrow',
  pin: '.pin',
  start: 'top top',
  end: 'bottom bottom',
  // markers: true
})

// const svg = document.querySelector('#cta-arrow')
// const line = document.querySelector('#aside-line')
// const headline = document.querySelector('#contact h2')
// console.log({svg, line, headline})
// if (svg && line && headline) {
//   const { top, height } = headline.getBoundingClientRect()
//   const { height: fullHeight } = svg.getBoundingClientRect()
//   const y = (window.scrollY + top + height/2) / fullHeight * 100
//   line.setAttribute('d', line.getAttribute('d').replace(/v \d+.*/, `v ${y} h 100`))
// }

const sections = Array.from(document.querySelectorAll('section[id]')).reduce((result, element) => {
  result[element.id] = 0
  return result
}, {})
let highlightedSection = 'hero'
const intersectionObserver = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    const id = (entry.target as HTMLElement).id
    sections[id] = entry.intersectionRatio
  })
  highlightedSection = Object.entries(sections).reduce(([oldId, oldMax], [id, ratio]) => {
    return ratio > oldMax ?
      [id, ratio] :
      [oldId, oldMax];
  }, [null, 0])[0]
  console.log(highlightedSection)
}, {
  threshold: Array(10).fill(undefined).map((_, index) => (index+1)/10)
})
document.querySelectorAll('section[id]').forEach(section => intersectionObserver.observe(section))

</script>

<style define:vars={{ sections, gutter1, gutter2, endGutter, startGutter }}>
</style>