---
import Menu from "./icons/Menu.astro";

const links = [
  ['Home', '', 'hero'],
  ['Technische Daten', 'data'],
  ['Herstellung', 'production'],
  ['Zubehör', 'addons'],
  ['Über uns', 'about'],
  ['Kontakt', 'contact']
]
---
<div class="flex items-center md:hidden font-bold uppercase underline cursor-pointer pl-4" x-on:click="open = !open">
  <Menu class="w-6 fill-white"></Menu>
  <span class="ml-2">Menü</span>
</div>
<ul class="max-md:absolute max-md:bg-coal max-md:bg-opacity-60 max-md:mt-6 max-md:pb-6 max-md:pl-4 max-md:-translate-x-[calc(100%+var(--startGutter))] md:flex max-md:space-y-2 justify-between gap-x-2 w-full uppercase font-bold transition-all duration-700" x-bind:class="open && '![--tw-translate-x:0]'">
  {links.map(([title, target, id]) => (
    <li class="flex flex-col md:items-center" data-section-id={id || target}>
      <a href={`#${target}`} class="leading-none" x-on:click="open = false">{title}</a>
      <div class="hidden md:flex relative w-full justify-center">
        <hr class="absolute w-full top-0">
        <div class="dot absolute mx-auto border-4 rounded-[50%] mt-2"></div>
      </div>
    </li>
  ))}
</ul>

<script>
if (IntersectionObserver) {
  const sectionElements = document.querySelectorAll('section[id]')
  const navLinks = document.querySelectorAll('nav > ul > li')
  const sections = Array.from(navLinks).reduce((result, element) => {
    result[element.getAttribute('data-section-id')] = element
    return result
  }, {})

  const intersectionObserver = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const id = entry.target.getAttribute('id')
      if (entry.intersectionRatio > 0.2) {
        sections[id]?.classList.add('active')
      } else {
        sections[id]?.classList.remove('active')
      }
    })
  }, {
    threshold: Array(10).fill(undefined).map((_, index, array) => (index+1)/array.length)
  })

  let registered = false
  let timeout: number
  const delay = 250
  const minWidth = 600

  handleResize()

  function handleResize() {
    // console.log('resized')
    if (window.innerWidth < minWidth) {
      if (registered) {
        intersectionObserver.disconnect()
        registered = false
        navLinks.forEach(element => element.classList.remove('active'))
        // console.log('unregistered')
      }
    } else {
      if (!registered) {
        sectionElements.forEach(section => intersectionObserver.observe(section))
        registered = true
        // console.log('registered')
      }
    }
  }

  window.addEventListener('resize', function() {
    clearTimeout(timeout);
    timeout = setTimeout(handleResize, delay);
  });
}
</script>

<style>
  li {
    &.active {
      @apply text-red-600 border-red-600;
    }

    * {
      border-color: inherit;
    }

    .dot {
      @apply transition-all;
    }

    &:not(.active):not(:hover) .dot {
      @apply scale-0;
    }
  }
</style>